@inherits ToggleableComponentBase
@implements IDisposable
@using System.Timers;

<CascadingValue Value="@DropDownMenuControl">
    <DynamicElement Attributes="@UnknownParameters" TagName="@Tag" class="@classname" @onfocusout="@LostFocus" @onmousedown="@(() => _MouseDown = true)">
        @ChildContent
    </DynamicElement>
</CascadingValue>

@code {
    private bool _MouseDown = false;
    private string classname =>
        new CssBuilder("nav-item")
            .AddClass("dropdown", IsDropdown)
            .AddClass("show", IsDropdown && !_manual && DropDownMenuControl.Handler.IsOpen(DropDownMenuControl.Id))
            .AddClass("show", IsDropdown && _manual && IsOpen.HasValue && IsOpen.Value)
            .AddClass(Class)
        .Build();

    private System.Timers.Timer _timer = new Timer(100);

    private string Tag => BlazorNavValues.IsList ? "ul" : "nav";

    [Parameter] private bool IsDropdown { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    [CascadingParameter] private BlazorNavValues BlazorNavValues { get; set; }
    public DropDownMenuControl DropDownMenuControl { get; set; } = new DropDownMenuControl();
    protected override Task OnInitAsync()
    {
        _timer.Elapsed += OnTimedEvent;
        if (BlazorNavValues.DropDownMenuHandler != null && IsDropdown && !_manual)
        {
            DropDownMenuControl.Handler = BlazorNavValues.DropDownMenuHandler;
            DropDownMenuControl.Id = Guid.NewGuid().ToString();
            BlazorNavValues.DropDownMenuHandler.AddDropDownMenu(DropDownMenuControl.Id);
        }
        return base.OnInitAsync();
    }

    public override void Toggle()
    {
        DropDownMenuControl.Handler.Toggle(DropDownMenuControl.Id);
        base.Toggle();
    }

    public override void Show()
    {
        DropDownMenuControl.Handler.Show(DropDownMenuControl.Id);
        base.Show();
    }

    public override void Hide()
    {
        DropDownMenuControl.Handler.Hide(DropDownMenuControl.Id);
        base.Hide();
    }

    private void LostFocus()
    {
        if (DropDownMenuControl != null && IsDropdown && !_manual && !_MouseDown)
        {
            if (DropDownMenuControl.Handler.IsOpen(DropDownMenuControl.Id))
            {
                _timer.Start();
            }
        }
        _MouseDown = false;
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        _timer.Stop();
        Invoke(() => DropDownMenuControl.Handler.Toggle(DropDownMenuControl.Id));
    }

    public void Dispose()
    {
        if (BlazorNavValues.DropDownMenuHandler != null && IsDropdown && IsOpen == null)
        {
            BlazorNavValues.DropDownMenuHandler.RemoveDropDownMenu(DropDownMenuControl.Id);
        }
        if (_timer != null)
        {
            _timer.Stop();
            _timer.Dispose();
            _timer = null;
        }
    }
}