@inherits ToggleableComponentBase
@implements IDisposable

<CascadingValue Value="@DropDownMenuControl">
    <DynamicElement Attributes="@UnknownParameters" TagName="li" class="@classname" @onfocusout="@LostFocus">
        @ChildContent
    </DynamicElement>
</CascadingValue>

@code {
    private string classname =>
        new CssBuilder("nav-item")
            .AddClass("dropdown", IsDropdown)
            .AddClass("show", IsDropdown && !_manual && DropDownMenuControl.Handler.IsOpen(DropDownMenuControl.Id))
            .AddClass("show", IsDropdown && _manual && IsOpen.HasValue && IsOpen.Value)
            .AddClass(Class)
        .Build();
   
    [Parameter] private bool IsDropdown { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    [CascadingParameter] private DropDownMenuHandler DropDownMenuHandler { get; set; }
    public DropDownMenuControl DropDownMenuControl { get; set; } = new DropDownMenuControl();
    protected override Task OnInitAsync()
    {
        if (DropDownMenuHandler != null && IsDropdown && !_manual)
        {
            DropDownMenuControl.Handler = DropDownMenuHandler;
            DropDownMenuControl.Id = Guid.NewGuid().ToString();
            DropDownMenuHandler.AddDropDownMenu(DropDownMenuControl.Id);
        }
        return base.OnInitAsync();
    }

    public override void Toggle()
    {
        DropDownMenuControl.Handler.Toggle(DropDownMenuControl.Id);
        base.Toggle();
    }

    public override void Show()
    {
        DropDownMenuControl.Handler.Show(DropDownMenuControl.Id);
        base.Show();
    }

    public override void Hide()
    {
        DropDownMenuControl.Handler.Hide(DropDownMenuControl.Id);
        base.Hide();
    }

    private void LostFocus()
    {
     if(DropDownMenuControl != null && IsDropdown && !_manual)
        {
            if (DropDownMenuControl.Handler.IsOpen(DropDownMenuControl.Id))
            {
                Invoke(() => DropDownMenuControl.Handler.Toggle(DropDownMenuControl.Id));
            }
        }
    }

    public void Dispose()
    {
        if (DropDownMenuHandler != null && IsDropdown && IsOpen == null)
        {
            DropDownMenuHandler.RemoveDropDownMenu(DropDownMenuControl.Id);
        }
    }
}