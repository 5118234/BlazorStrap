@inherits BootstrapComponentBase
@using  BlazorStrap.util

<CascadingValue Value="@DropDownMenuControl">
    <DynamicElement Attributes="@UnknownParameters" TagName="li" class="@classname">
        @ChildContent
    </DynamicElement>
</CascadingValue>

@code {
private string classname
{
    get
    {
        var dropdown = IsDropdown ? "dropdown" : null;
        var show = "";
        if (IsDropdown)
        {
            if (IsOpen == null)
            {
                show = DropDownMenuControl.Handler.IsOpen(DropDownMenuControl.Id) ? "show" : null;
            }
            else
            {
                show = (bool)IsOpen ? "show" : null;
            }
        }
        return $"nav-item {dropdown} {show} {Class}".RemoveUnneededSpaces();
    }
}
[Parameter] private bool IsDropdown { get; set; }
[Parameter] private bool? IsOpen { get; set; }
[Parameter] private string Class { get; set; }
[Parameter] private RenderFragment ChildContent { get; set; }
[CascadingParameter] private DropDownMenuHandler DropDownMenuHandler { get; set; }
public DropDownMenuControl DropDownMenuControl { get; set; } = new DropDownMenuControl();
protected override Task OnInitAsync()
{
    if (DropDownMenuHandler != null && IsDropdown && IsOpen == null)
    {
        DropDownMenuControl.Handler = DropDownMenuHandler;
        DropDownMenuControl.Id = Guid.NewGuid().ToString();
        DropDownMenuHandler.AddDropDownMenu(DropDownMenuControl.Id);
    }
    return base.OnInitAsync();
}

public void Dispose()
{
    if (DropDownMenuHandler != null && IsDropdown && IsOpen == null)
    {
        DropDownMenuHandler.RemoveDropDownMenu(DropDownMenuControl.Id);
    }
}
}