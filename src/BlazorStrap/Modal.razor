@inherits BootstrapComponentBase
@using BlazorStrap.util
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
<DynamicElement Attributes="@UnknownParameters" style="@styles" TagName="div" class="@classname" tabindex="-1" role="dialog" @onclick="@onclick" @onkeydown="@onEscape">
    <div class="@innerClassname" role="document" @ref="Me" tabindex="-2" >
        <div class="modal-content" @onclick="@dontclick">
            @ChildContent
        </div>
    </div>
</DynamicElement>
@if (IsOpen)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private ElementRef Me { get; set; }
    private bool JustOpened;
    protected override async Task OnAfterRenderAsync()
    {
        await new BlazorStrapInterop(JSRuntime).ChangeBody(_isOpen ? "modal-open" : null);
        // Sets Focus inside model so escape key can work.
        if (JustOpened)
        {
            await new BlazorStrapInterop(JSRuntime).FocusElement(Me);
            JustOpened = false;
        }
    }

    string classname
    {
        get
        {
            var display = IsOpen ? "fade show" : null;
            return $"modal {display} {Class}".RemoveUnneededSpaces();
        }
    }
    string innerClassname
    {
        get
        {
            var center = IsCentered ? "modal-dialog-centered" : null;
            var size = Size != Size.None ? $"modal-{Size.ToDescriptionString()}" : null;
            return $"modal-dialog {size} {center}".RemoveUnneededSpaces();
        }
    }
    string styles
    {
        get
        {
            var display = IsOpen ? "display: block; padding-right: 17px;" : null;
            return $"{Style} {display}".RemoveUnneededSpaces();
        }
    }
    private bool _isOpen;

    private bool IsOpen
    {
        get
        {
            return _isOpen;
        }
        set
        {
            if (value != _isOpen)
            {
                _isOpen = value;
                IsOpenChanged.InvokeAsync(_isOpen);
            }
            if(value == true)
            {
                JustOpened = true;
            }
        }
    }
    [Parameter] private EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] private bool IsCentered { get; set; }
    [Parameter] private Size Size { get; set; } = Size.None;
    [Parameter] private string Class { get; set; }
    [Parameter] private string Style { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    [Parameter] private bool IgnoreClickOnBackdrop { get; set; }
    [Parameter] private bool IgnoreEscape { get; set; }

    private bool _dontclickWasClicked;
    void onclick()
    {
        if (!IgnoreClickOnBackdrop)
        {
            if (!_dontclickWasClicked) IsOpen = false;
            _dontclickWasClicked = false;
            StateHasChanged();
        }
    }
    private void onEscape(UIKeyboardEventArgs e)
    {
        if (e.Key.ToLower() == "escape" && !IgnoreEscape)
        {
            _isOpen = false;
            IsOpenChanged.InvokeAsync(false);
            StateHasChanged();
        }
    }
    void dontclick(UIMouseEventArgs e)
    {
        _dontclickWasClicked = true;
    }

    public void Show()
    {
        _isOpen = true;
        JustOpened = true;
        IsOpenChanged.InvokeAsync(true);
        StateHasChanged();
    }
    public void Hide()
    {
        _isOpen = false;
        IsOpenChanged.InvokeAsync(false);
        StateHasChanged();
    }
    public void Toggle()
    {
        _isOpen = !_isOpen;
        JustOpened = _isOpen;
        IsOpenChanged.InvokeAsync(_isOpen);
        StateHasChanged();
    }
  
}
