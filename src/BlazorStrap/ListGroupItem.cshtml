@using Microsoft.AspNetCore.Blazor
@using BlazorStrap.util

@if (ListGroupType == ListGroupType.Button)
{
    <button type="button" onclick="@_onclick" class="@classname" style="@Style" disabled="@IsDisabled">
        @ChildContent
    </button>
}
@if (ListGroupType == ListGroupType.Link)
{
    <a href="@Href" onclick="@_onclick" class="@classname" style="@Style">
        @ChildContent
    </a>
}
@if (ListGroupType == ListGroupType.List)
{
    <li onclick="@_onclick" class="@classname" style="@Style">
        @ChildContent
    </li>
}


@functions {
    private string classname
    {
        get
        {
            var disabled = IsDisabled && ListGroupType != ListGroupType.Button ? "disabled" : null;
            var active = IsActive ? "active" : null;
            var action = ListGroupType == ListGroupType.Button || ListGroupType == ListGroupType.Link ? "list-group-item-action" : null;
            var color = Color != Color.None ? $"list-group-item-{Color.ToDescriptionString()}" : null;
            return $"list-group-item {color} {action} {active} {disabled} {Class}";
        }
    }
    public bool IsActive { get; set; }
    public bool IsDisabled { get; set; }
    public ListGroupType ListGroupType { get; set; } = ListGroupType.List;
    public string Href { get; set; }
    public Action<UIMouseEventArgs> OnClick { get; set; }
    public Color Color { get; set; } = Color.None;
    public string Class { get; set; }
    public string Style { get; set; }
    public RenderFragment ChildContent { get; set; }
    private void _onclick(UIMouseEventArgs e)
    {
        if (OnClick != null) OnClick(e);
    }
}
