@using Microsoft.AspNetCore.Blazor
@using BlazorStrap.util

@if (ButtonType == ButtonType.Button)
{
    <button id="@Id" onclick="@onclick" type="button" class="@classname" style="@Style" disabled="@disabled">@ChildContent</button>
}
@if (ButtonType == ButtonType.Link)
{
    <a href="@Href" onclick="@onclick" class="@classname" style="@Style" role="button" aria-pressed="@pressed" aria-disabled="@disabled" tabindex="@tab">@ChildContent</a>
}
@if (ButtonType == ButtonType.Input)
{
    <input onclick="@onclick" class="@classname" style="@Style" type="button" value="@Value" disabled="@disabled" />
}
@if (ButtonType == ButtonType.Submit)
{
    <input onclick="@onclick" class="@classname" style="@Style" type="submit" value="@Value" disabled="@disabled" />
}
@if (ButtonType == ButtonType.Reset)
{
    <input onclick="@onclick" class="@classname" style="@Style" type="reset" value="@Value" disabled="@disabled" />
}
@if (ButtonType == ButtonType.Checkbox)
{
    <label class="btn btn-secondary active">
        <input onclick="@_buttonGroupOnClick" class="@classname" style="@Style" type="checkbox" autocomplete="off" /> @ChildContent
    </label>
}
@if (ButtonType == ButtonType.Radio)
{
    <label class="btn btn-secondary active">
        <input class="@classname" style="@Style" type="radio" checked autocomplete="off"> @ChildContent
    </label>
}

@functions {
    private string classname
    {
        get
        {
            var outline = IsOutline ? $"btn-outline-{Color.ToDescriptionString()}" : null;
            var color = Color != Color.None ? $"btn-{Color.ToDescriptionString()}" : null;
            var size = Size != Size.None ? $"btn-{Size.ToDescriptionString()}" : null;
            var block = IsBlock ? "btn-block" : null;
            var active = ButtonType == ButtonType.Link && IsActive ? "active" : null;
            var linkDisabled = ButtonType == ButtonType.Link && IsDisabled ? "disabled" : null;
            return $"btn {color} {outline} {size} {block} {active} {linkDisabled} {Class}";
        }
    }

    private string pressed
    {
        get
        {
            return IsActive ? "true" : null;
        }
    }

    private string disabled
    {
        get
        {
            return IsDisabled ? "true" : null;
        }
    }

    private string tab
    {
        get
        {
            return IsDisabled ? "-1" : null;
        }
    }

    internal Action<UIMouseEventArgs> OnButtonGroupClick { get; set; }

    [Parameter]
    private Action<UIMouseEventArgs> onclick { get; set; }
    [Parameter]
    private Color Color { get; set; } = Color.Primary;
    [Parameter]
    private ButtonType ButtonType { get; set; } = ButtonType.Button;
    [Parameter]
    private string Href { get; set; }
    [Parameter]
    private bool IsOutline { get; set; }
    [Parameter]
    private Size Size { get; set; } = Size.None;
    [Parameter]
    private bool IsBlock { get; set; }
    [Parameter]
    private string Value { get; set; }
    [Parameter]
    private bool IsActive { get; set; }
    [Parameter]
    private bool IsDisabled { get; set; }
    [Parameter]
    private string Id { get; set; }
    [Parameter]
    private string Class { get; set; }
    [Parameter]
    private string Style { get; set; }
    [Parameter]
    private RenderFragment ChildContent { get; set; }


    private void _buttonGroupOnClick(UIMouseEventArgs e)
    {
        if (OnButtonGroupClick != null) OnButtonGroupClick(e);
    }
}