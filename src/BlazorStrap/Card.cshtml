@using Microsoft.AspNetCore.Blazor
@using BlazorStrap.util

@if (CardType == CardType.Card || CardType == CardType.Body || CardType == CardType.ImageOverlay || CardType == CardType.Group || CardType == CardType.Deck || CardType == CardType.Columns)
{
    <div class="@classname" style="@Style">@ChildContent</div>
}
@if (CardType == CardType.Image)
{
    <img class="@classname" style="@Style" src="@src" alt="@alt" />
}
@if (CardType == CardType.Title)
{
    <h5 class="@classname" style="@Style">@ChildContent</h5>
}
@if (CardType == CardType.Subtitle)
{
    <h6 class="@classname" style="@Style">@ChildContent</h6>
}
@if (CardType == CardType.Text)
{
    <p class="card-text">@ChildContent</p>
}
@if (CardType == CardType.Link)
{
    <a href="@href" class="@classname" style="@Style">@ChildContent</a>
}
@if (CardType == CardType.Footer)
{
    <div class="@classname" style="@Style">@ChildContent</div>
}
@if (CardType == CardType.Header)
{
    @if (HeadingSize == HeadingSize.None)
    {
        <div class="@classname" style="@Style">@ChildContent</div>
    }
    @if (HeadingSize == HeadingSize.H1)
    {
        <h1 class="@classname" style="@Style">@ChildContent</h1>
    }
    @if (HeadingSize == HeadingSize.H2)
    {
        <h2 class="@classname" style="@Style">@ChildContent</h2>
    }
    @if (HeadingSize == HeadingSize.H3)
    {
        <h3 class="@classname" style="@Style">@ChildContent</h3>
    }
    @if (HeadingSize == HeadingSize.H4)
    {
        <h4 class="@classname" style="@Style">@ChildContent</h4>
    }
    @if (HeadingSize == HeadingSize.H5)
    {
        <h5 class="@classname" style="@Style">@ChildContent</h5>
    }
    @if (HeadingSize == HeadingSize.H6)
    {
        <h6 class="@classname" style="@Style">@ChildContent</h6>
    }
}


@functions {
    string classname
    {
        get
        {
            return $"{GetClass()} {Class}";
        }
    }
    [Parameter] private CardType CardType { get; set; } = CardType.Card;
    [Parameter] private VerticalAlignment VerticalAlignment { get; set; } = VerticalAlignment.None;
    [Parameter] private Alignment Alignment { get; set; } = Alignment.Left;
    [Parameter] private string src { get; set; }
    [Parameter] private string alt { get; set; }
    [Parameter] private string href { get; set; }
    [Parameter] private HeadingSize HeadingSize { get; set; } = HeadingSize.None;
    [Parameter] private bool IsInverse { get; set; }
    [Parameter] private Color Color { get; set; } = Color.None;
    [Parameter] private bool IsOutline { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private string Style { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }

    private string GetImageVerticalAlignmnet()
    {
        switch (this.VerticalAlignment)
        {
            case VerticalAlignment.Top:
                return "-top";
            case VerticalAlignment.Bottom:
                return "-bottom";
            default:
                return null;
        }
    }

    private string GetCardAlignmnet()
    {
        switch (this.Alignment)
        {
            case Alignment.Center:
                return "text-center";
            case Alignment.Right:
                return "text-right";
            default:
                return null;
        }
    }

    private string GetCardColor()
    {
        if (Color == Color.None) return null;
        var textColor = Color == Color.Light || IsOutline ? null : "text-white";
        var prefix = IsOutline ? "border" : "bg";
        return $"{textColor} {prefix}-{Color.ToDescriptionString()}";
    }

    private string GetTextColor()
    {
        if (IsOutline) return null;
        if (Color == Color.None || Color == Color.Light) return null;
        return $"text-{Color.ToDescriptionString()}";
    }

    private string GetClass()
    {
        switch (this.CardType)
        {
            case CardType.Body:
                return $"card-body {GetTextColor()}";
            case CardType.Card:
                var inverse = IsInverse ? "bg-dark text-white" : null;
                return $"card {GetCardColor()} {GetCardAlignmnet()} {inverse}";
            case CardType.Image:
                return $"card-img{GetImageVerticalAlignmnet()}";
            case CardType.Title:
                return "card-title";
            case CardType.Subtitle:
                return "card-subtitle mb-2 text-muted";
            case CardType.Link:
                return "card-link";
            case CardType.Header:
                return "card-header";
            case CardType.Footer:
                return "card-footer";
            case CardType.ImageOverlay:
                return "card-img-overlay";
            case CardType.Group:
                return "card-group";
            case CardType.Deck:
                return "card-deck";
            case CardType.Columns:
                return "card-columns";
            default:
                return null;
        }
    }
}